import {Menu} from '@grammyjs/menu';
import type {Context, NextFunction, SessionFlavor} from 'grammy';
import {Composer} from 'grammy';

import {onlyAdmin} from '../middlewares';
import type {StartSettings} from '../types';
import {ActionType} from '../types';

export const createInitialSessionData = () => ({
    chatID: '0',
    chatType: 'private',
    action: ActionType.NOTHING,
    isConfigured: false,
});

export type MyContext = Context & SessionFlavor<StartSettings>;

export const initStartComposer = () => {
    const startComposer = new Composer<MyContext>();

    // eslint-disable-next-line unicorn/consistent-function-scoping
    const messageButtonHandler = (actionType: ActionType) => async (context: MyContext, next: NextFunction) => {
        if (!context.chat) {
            return next();
        }
        context.session.action = actionType;

        await context.deleteMessage();
        await context.reply(`–í–∏ –≤–∏–±—Ä–∞–ª–∏ ${actionType.toString()}`);
        if (actionType === ActionType.POLL) {
            if (context.chat === undefined || context.msg === undefined) {
                return;
            }
            await context.replyWithPoll(
                `–Ω—É–º–æ –æ–±–µ—Ä–µ–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è`,
                ['–ó–∞–ª–∏—à–∏—Ç–∏ —Ç–æ–∫—Å—ñ–∫—ñ–≤ —É —Å–ø–æ–∫–æ—ó', '–í–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', '–ë–∞–Ω–∏—Ç–∏ –ø—ñ—Å–ª—è 2 —Ç–æ–∫—Å–∏—á–Ω–∏—Ö –ø–æ—ñ–¥–æ–º–ª–µ–Ω—å'],
                {
                    open_period: 60,
                },
            );
        }
    };
    const startMenu = new Menu<MyContext>('start-menu-identifier')
        .text('–ó–∞–ª–∏—à–∏—Ç–∏ —Ç–æ–∫—Å—ñ–∫—ñ–≤ —É —Å–ø–æ–∫–æ—ó', messageButtonHandler(ActionType.NOTHING))
        .row()
        .text('–í–∏–¥–∞–ª—è—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', messageButtonHandler(ActionType.DELETE))
        .row()
        .text('–ë–∞–Ω–∏—Ç–∏ –ø—ñ—Å–ª—è 2 —Ç–æ–∫—Å–∏—á–Ω–∏—Ö –ø–æ—ñ–¥–æ–º–ª–µ–Ω—å', messageButtonHandler(ActionType.BAN))
        .row()
        .text('Vox populi vox Dei, –≥–æ–ª–æ—Å—É—î–º–æ', messageButtonHandler(ActionType.POLL));
    const configureBot = async (context: MyContext) => {
        await context.reply('–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', { reply_markup: startMenu });
        if (!context.chat) {
            return;
        }
        context.session.chatID = context.chat.id.toString();
        context.session.chatType = context.chat.type;
        context.session.isConfigured = true;
    };
    const reconfigureButtonHandler = (reconfigure: boolean) => async (context: MyContext, next: NextFunction) => {
        await context.deleteMessage();
        if (!reconfigure) {
            return next();
        }
        await configureBot(context);
    };
    const reconfigureMenu = new Menu<MyContext>('reconfigure-menu-identifier')
        .text('‚úÖ –¢–∞–∫', reconfigureButtonHandler(true))
        .text('‚ùå –ù—ñ', reconfigureButtonHandler(false));

    const groupStartComposer = startComposer.filter((context) => context.chat?.type !== 'private');

    groupStartComposer.command(
        'start',
        async (context, next) => onlyAdmin(context, next),
        async (context) => {
            await (context.session.isConfigured
                ? context.reply('–í–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –±–æ—Ç–∞? ü§ñ', { reply_markup: reconfigureMenu })
                : configureBot(context));
        },
    );

    return { startComposer, startMenu, reconfigureMenu };
};
