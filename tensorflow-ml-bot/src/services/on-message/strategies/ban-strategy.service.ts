import type { Menu } from "@grammyjs/menu";
import type { MyContext } from '../../../composers';
import type { ActionHandlerInterface } from '../action-handler.interface';
import type { TensorResult } from '../../../types';

export class BanStrategyService implements ActionHandlerInterface {
    async handle(context: MyContext, predictedResult: TensorResult, menu?: Menu<MyContext>): Promise<void> {
        if (context.msg?.from === undefined) {
            console.info('Message from is undefined :(');
            return;
        }
        // eslint-disable-next-line camelcase
        const { text, message_id } = context.msg;
        if (predictedResult.score >= 0.9) {
            await context.deleteMessage();
            await context.reply(
                `score: ${predictedResult.score}, message: ${text || ''} @${
                    context.msg.from.username as string
                } —Ç–∞ —Ç–∏ —Ä–µ–∞–ª—å–Ω–æ —Ç–æ–∫—Å—ñ–∫ ü§¢, –∑–∞ —Ç–∞–∫–µ –π –Ω–µ –≥—Ä—ñ—Ö –∑–∞–±–∞–Ω–∏—Ç–∏ ‚ùå \n–ó–∞—Å–ø–æ–∫—ñ–π—Å—è —Ç—Ä—ñ—à–∫–∏`,
            );
        } else if (predictedResult.score > 0.5 && menu) {
            await context.reply(
                `${predictedResult.score} @${
                    context.msg.from.username as string
                } –Ω–µ –ª–∞–π—Å—è, –±–æ —è —Ç–æ–±—ñ –≤ –≤—ñ—á—ñ –ø–ª—é–Ω—É, ‚Äî –≥–æ–≤–æ—Ä–∏–ª–∞ –±–∞–±–∞ –ö–∞–π–¥–∞—à–∏—Ö–∞ üò§\``,
                {
                    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment,camelcase
                    reply_to_message_id: message_id,
                    reply_markup: menu,
                },
            );
            // await context.deleteMessage();
            // await context.reply('–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ, –±–æ –≤–∏ —Ç–æ–∫—Å—ñ–∫, —ñ–¥—ñ—Ç—å –ø–æ–ø–ª–∞—á—Ç–µ üëø');
        }
    }
}
